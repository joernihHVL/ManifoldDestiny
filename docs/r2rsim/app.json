[{"name":"app.R","content":"#library(plotly)\n#library(dplyr)\n#library(shiny)\n#library(combinat)\n#library(htmltools)\n#library(ggplot2)\n#library(gridExtra)\n#library(broom)\n#library(tidyr)\n#library(combinat)\n#library(AlgebraicHaploPackage)\n#library(huxtable)\n#library(kableExtra)\n#library(polynom)\nManifoldDestiny::wasmconload()\n#Shiny\nui <- fluidPage(\n  titlePanel(\"R2 Simulator\"),\n  tabsetPanel(\n    tabPanel(\"Graph\", \n             sidebarLayout(\n               sidebarPanel(\n                 selectInput(\"variable\", \"Select a form:\", c(\"Normal form\" = \"normal\", \"Hybrid form\" = \"hybrid\", \"Opposition form\" = \"opposition\")),\n                 numericInput(\"nprec\", \"Number of precincts:\", value = 300),\n                 textInput(\"regv\", \"Registered voters (mean,std)\", value='3.15, 0.25'),\n                 textInput(\"minmax\", \"Min and max values number of voters\", value='400, 4000'),\n                 textInput(\"turn\", \"Probability of voting:\", value = '0.5, 0.10'),\n                 textInput(\"invper\", \"Election system variability:\", value ='0.5, 0.10'),\n                 textInput(\"u\", \"Probability of x/g/n:\", value = '0.6, 0.10'),\n                 textInput(\"dv\", \"Diff probability of x/g/n:\", value = '-0.2, 0.08'),\n                 numericInput(\"draws\", \"Number of draws\", value = 30),\n                 actionButton(\"run\", \"Run Simulation\")\n               ),\n               mainPanel(\n                 plotOutput(\"plot\"),\n                 tableOutput(\"table\")\n               )\n             ))\n    ),\n    tabPanel(\"Tables\", \n             tabsetPanel(\n               tabPanel(\"Table 1\",\n                        sidebarLayout(\n                          sidebarPanel(),\n                          mainPanel(\n                            tableOutput(\"table1\")\n                          )\n                        )\n               ),\n               tabPanel(\"Table 2\",\n                        sidebarLayout(\n                          sidebarPanel(),\n                          mainPanel(\n                            tableOutput(\"table2\")\n                          )\n                        )\n               )\n             )\n    )\n)\nserver <- function(input, output) {\n  # Run simulation\n  dfgp <- eventReactive(input$run, {\n    # Input DF1\n    regv <- as.numeric(strsplit(input$regv, \",\")[[1]])\n    minmax <- as.numeric(strsplit(input$minmax, \",\")[[1]])\n    turn <- as.numeric(strsplit(input$turn, \",\")[[1]])\n    invper <- as.numeric(strsplit(input$invper, \",\")[[1]])\n    u <- as.numeric(strsplit(input$u, \",\")[[1]])\n    dv <- as.numeric(strsplit(input$dv, \",\")[[1]])\n    tf <- replicate(input$draws,r2simn(nprec = input$nprec,\n          regs = c(regv[1], regv[2]),\n          minmax = c(minmax[1],minmax[2]), turn = c(turn[1], turn[2]), Invper = c(invper[1], invper[2]),\n          u = c(u[1], u[2]),\n          dv = c(dv[1], dv[2]),\n          form = 1)[c(1,2,3)])\n    dfgp <- data.frame(r2a=unlist(tf[seq(1,length(tf),3)]),r2b=unlist(tf[seq(2,length(tf),3)])) %>% mutate(perc = ntile(r2a, 100)) \n    # Input DF2\n    percentiles <- c(90, 95, 99)\n    nstd <- c(1,2,5)\n    std <- mean(dfgp$r2a)+nstd*sd(dfgp$r2a)\n    perc1 <- quantile(dfgp$r2a,probs = percentiles / 100)\n    perc2 <- quantile(dfgp$r2b,probs = percentiles / 100)\n    percdf <- data.frame(perc1,perc2,nstd,std) %>% data.table::setnames(c(\"Perc r2a\",\"Perc r2b\",\"Nstd\",\"Vstd\")) \n    list(dfgp,percdf)\n  })\n  # Create plot\n  output$plot <- renderPlot({\n\t  #browser()\n    dfp <- dfgp()[[1]] %>% tidyr::pivot_longer(cols=c(\"r2a\",\"r2b\")) %>% dplyr::arrange(name,perc)\n    ggplot(dfp,aes(x=value, fill=name)) + \n      geom_histogram(position = \"identity\", alpha = 0.5, bins = 30) + \n      labs(title = \"Histogram of Values by Category\", x = \"Value\", y = \"Count\") +\n      geom_vline(xintercept = as.numeric(dfgp()[[2]][1,1]), linetype = \"dashed\", color = \"blue\") +\n      geom_vline(xintercept = as.numeric(dfgp()[[2]][2,1]), linetype = \"dashed\", color = \"blue\") +\n      geom_vline(xintercept = as.numeric(dfgp()[[2]][3,1]), linetype = \"dashed\", color = \"blue\") +\n      geom_vline(xintercept = as.numeric(dfgp()[[2]][3,4]), linetype = \"solid\", color = \"red\") +\n      geom_label(y=0,x=as.numeric(dfgp()[[2]][1,1]),label=\"*\",geom=\"label\") +\n      geom_label(y=0,x=as.numeric(dfgp()[[2]][2,1]),label=\"**\",geom=\"label\") +\n      geom_label(y=0,x=as.numeric(dfgp()[[2]][3,1]),label=\"***\",geom=\"label\") +\n      theme_minimal() +\n      scale_fill_manual(values = c(\"#0072B2\", \"#E69F00\"))  # set fill colors\n  })\n  \n  ## Create table\n  output$table1 <- renderUI({\n    DT::datatable(round(dfgp()[[2]],digits=4))\n  })\n  output$table2 <- renderUI({\n    DT::datatable(round(dfgp()[[1]], digits=4), options = list(pageLength = 20))\n  })\n}\n# Run app\nshinyApp(ui = ui, server = server)\n\n","type":"text"}]
