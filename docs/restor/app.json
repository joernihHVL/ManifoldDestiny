[{"name":"app.R","content":"ManifoldDestiny::wasmconload()\ncompute_residuals <- function(angle, data) {\n  # Compute the rotated coordinates\n  data$angle <- angle * pi / 180\n  data$x_r <- data$x * cos(data$angle) - data$y * sin(data$angle)\n  data$y_r <- data$x * sin(data$angle) + data$y * cos(data$angle)\n  \n  # Compute the residuals\n  residuals <- data$x_r - data$y_r\n  \n  # Return the sum of squared residuals\n  return(mean(residuals^2))\n}\noptions(scipen=999)\nset.seed(1)\nui <- fluidPage(\n  titlePanel(\"Restoration\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"rotation\", \"Rotation angle (in degrees):\", min = -180, max = 180, value = 0)\n    ),\n    mainPanel(\n      plotOutput(\"plot\"),\n      tableOutput(\"table\")\n    )\n  )\n)\n# Server\nserver <- function(input, output) {\n  data <- reactive({\n    #angle <- input$rotation * pi / 180  # Convert angle to radians\n    #eleres_transformed <- eleres %>%\n    #  mutate(x_r = x * cos(angle) - y * sin(angle),\n    #         y_r = x * sin(angle) + y * cos(angle),\n    #         alpha1 = Omega * x + (1 - Omega) * y,\n    #         alpha2 = Omega * x_r + (1 - Omega) * y_r) \n    #result <- list(eleres_transformed, optimal_angle())\n    ##\n    ## Use the optim function to find the angle that minimizes the sum of squared residuals\n    #result <- optim(0, compute_residuals, data = eleres, control = list(fnscale = -1), method = \"Brent\", lower = -180, upper = 180)\n    #return(result)\n    #return(result)\n  })  \n  \n  # Plot\n  output$plot <- renderPlot({\n    #df1 <- data()[[1]]\n    #ggplot(data = df1, aes(x = x_r, y = y_r)) +\n    #  geom_point(aes(color = \"Before Rotation\")) +\n    #  geom_point(data = eleres, aes(x = y, y = x, color = \"After Rotation\")) +\n    #  labs(x = \"X\", y = \"Y\", color = \"Rotation\") +\n    #  scale_x_continuous(limits = c(0, 1)) +  # Limit x-axis between 0 and 1\n    #  scale_y_continuous(limits = c(0, 1)) +  # Limit y-axis between 0 and 1\n    #  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"red\") +  # Add 45-degree line\n    #  theme_minimal()\n  })\n  \n  # Table\n  output$table <- renderTable({\n    #df1 <- data()[[1]]\n    #opo <- data()[[2]]$param\n    #df2 <- df1 %>% dplyr::summarize(m_alpha1=mean(alpha1),m_alpha2=mean(alpha2),omega=mean(Omega), Precincts=n(), opteulr= opo[[1]])\n  })\n} \n# Run the app\nshinyApp(ui = ui, server = server)\n\n","type":"text"}]
