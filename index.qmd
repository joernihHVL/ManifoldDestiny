---
title: ""
output: github_document
always_allow_html: true
execute: 
  cache: false
filters:
  - webr
format: 
  html:
    css: "https://kineticgraphs.org/css/kg.0.2.7.css"
    include-in-body:
          - text: |
              <script src="https://kineticgraphs.org/js/kg.0.2.7.js"></script>
---

# Manifold Destiny - or how to rig an election
**Based upon the ideas developed by Edward K. Solomon**
![](pngs/md.png)

```{mermaid}
%%| echo: false
classDiagram
    class SimVoterdatabase{
        +field1
        +abc1()
    }
    class Countingprocess{
        +field1
        +abc1()
    }
    class Countinggraphs{
        +field1
        +abc1()
    }
    class Estimation{
        +field1
        +abc1()
    }
```


**Last time updated: `r as.Date(Sys.time())`**

```{r, echo=F}
knitr::knit_exit()
```


### Install and load packages
```{webr-r}
webr::install("ManifoldDestinyWASMP", repos = "https://lotariohw26.github.io/MD_WASMC")
webr::install("ManifoldDestinyWASMD", repos = "https://lotariohw26.github.io/MD_WASMC")
webr::install(c("AlgebraicHaploPackage","cowplot","broom","htmltools","combinat","DT","dplyr","purrr","magrittr","data.table","tidyr","plotly"))
library(ManifoldDestinyWASMP)
ls(package:ManifoldDestinyWASMP)
library(ManifoldDestinyWASMD)
ls(package:ManifoldDestinyWASMD)
library(magrittr)
md <- ManifoldDestinyWASMD::metad
library(dplyr)
library(combinat)
library(htmltools)
library(ggplot2)
library(broom)
library(tidyr)
library(combinat)
library(AlgebraicHaploPackage)
```

### Simulation
```{webr-r}
dfm <- (function(x){data.frame(P=seq(1,x),RV=as.integer(rnorm(x,1000,30)))})(10)
probw <- c(m=0.51,s=0.10)
probva <- c(vdm=0.7,mdm=0.4,vds=0.10,mds=0.10)
probvb <- c(vdm=0.5,mdm=0.6,vds=0.10,mds=0.10)
ztech <- c(0,1)	
app_bal <- ballcastsim(dfm,probw,probva,probvb,ztech)
SimVoterdatabase(app_bal)
app_n_rep <- selreport(app_bal,md$app0)
app_n_out <- seloutput(app_n_rep)
app_n_sim <- SimVoterdatabase(app_bal)
```

#### Normal
```{webr-r}
app_n_rep <- selreport(app_bal,md$app0)
app_n_out <- seloutput(app_n_rep)
app_n_sim <- SimVoterdatabase(app_bal)
```

#### Functions
```{webr-r}
2+2
```

#### Rig 1: Normal
```{webr-r}
app_ex1_cou <- Countinggraphs(app_bal)
print(app_ex1_cou$polyc[[1]][[1]])
app_ex1_cou$sortpre()
app_ex1_cou$mansys(sygen=list(frm=1,pre=c("alpha","x","y"),end=c("zeta","lamda"),me=c(plnr=1,rot=0)))
app_ex1_cou$setres(0.23,0)
app_ex1_cou$manimp(init_par=c(k0=0.0,k1=0.5,k2=0.5),TRUE,wn=c(0,0))
app_ex1_out <- seloutput(selreport(app_ex1_cou$rdfc,md$app0))
app_ex1_sim <- SimVoterdatabase(app_ex1_cou$rdfc)
```

#### Rig 2: Hybdrid
```{webr-r}
app_ex2_cou <- Countinggraphs(app_bal)
pri_int_ex2 <- app_ex2_cou$polyc[[1]][[1]]
print(app_ex2_cou$polyc[[1]][[1]])
app_ex2_cou$sortpre()
app_ex2_cou$mansys(sygen=list(frm=2,pre=c("alpha","g","h"),end=c("Gamma","Omega"),FALSE,me=c(plnr=1,rot=0)))
app_ex2_cou$setres(0.23,0)
app_ex2_cou$manimp(init_par=c(k0=0.0,k1=0.5,k2=0.5),wn=c(0,0))
app_ex2_out <- seloutput(selreport(app_ex2_cou$rdfc,md$app0))
app_ex2_sim <- SimVoterdatabase(app_ex2_cou$rdfc)
```

#### Rig 3: Opposition
```{webr-r}
app_ex3_cou <- Countinggraphs(app_bal)
pri_int_ex3 <- app_ex3_cou$polyc[[1]][[1]]
app_ex3_cou$sortpre()
app_ex3_cou$mansys(sygen=list(frm=1,pre=c("alpha","x","y"),end=c("zeta","lamda"),me=c(plnr=1,rot=0)))
app_ex3_cou$setres(0.23,0)
app_ex3_cou$manimp(init_par=c(k0=0.0,k1=0.5,k2=0.5),wn=c(0,0))
app_ex3_out <- seloutput(selreport(app_ex3_cou$rdfc,md$app0))
app_ex3_sim <- SimVoterdatabase(app_ex3_cou$rdfc)
```

### Applications

#### App1
```{webr-r}
app1_rp <- selreport(app1,md$app1)
app_1_out <- seloutput(app1_rp)
```

#### App2
```{webr-r}
app2_rp <- selreport(app2,md$app2)
app_2_out <- seloutput(app2_rp)
```

